{"ast":null,"code":"/*!\n * Sitemap\n * Copyright(c) 2011 Eugene Kalinin\n * MIT Licensed\n */\n\nvar _ = require('underscore');\n\n/**\n * Exit with the given `str`.\n *\n * @param {String} str\n */\nexports.abort = function (str) {\n  console.error(str);\n  process.exit(1);\n};\n\n/**\n * Escapes special characters in text.\n *\n * @param {String} text\n */\nexports.htmlEscape = function (text) {\n  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;');\n};\n\n/**\n *  Pads the left-side of a string with a specific\n *  set of characters.\n *\n *  @param {Object} n\n *  @param {Number} len\n *  @param {String} chr\n */\nexports.lpad = function (n, len, chr) {\n  var res = n.toString(),\n    chr = chr || '0',\n    leading = res.substr(0, 1) === '-';\n\n  //If left side of string is a minus sign (negative number), we want to ignore that in the padding process\n  if (leading) {\n    res = res.substr(1); //cut-off the leading '-'\n  }\n  while (res.length < len) {\n    res = chr + res;\n  }\n  if (leading) {\n    //If we initially cutoff the leading '-', we add it again here\n    res = '-' + res;\n  }\n  return res;\n};\n\n/**\n *\n * @param {Array} arr\n */\nexports.distinctArray = function (arr) {\n  var hash = {},\n    res = [],\n    arr_length = arr.length;\n  while (arr_length--) {\n    hash[arr[arr_length]] = true;\n  }\n  for (key in hash) {\n    res.push(key);\n  }\n  return res;\n};\nexports.chunkArray = function (arr, chunkSize) {\n  var lists = _.groupBy(arr, function (element, index) {\n    return Math.floor(index / chunkSize);\n  });\n  lists = _.toArray(lists);\n  return lists;\n};\nexports.getTimestamp = function () {\n  return new Date().getTime();\n};\nexports.getTimestampFromDate = function (dt, bRealtime) {\n  var timestamp = [dt.getUTCFullYear(), exports.lpad(dt.getUTCMonth() + 1, 2), exports.lpad(dt.getUTCDate(), 2)].join('-');\n\n  // Indicate that lastmod should include minutes and seconds (and timezone)\n  if (bRealtime && bRealtime === true) {\n    timestamp += 'T';\n    timestamp += [exports.lpad(dt.getUTCHours(), 2), exports.lpad(dt.getUTCMinutes(), 2), exports.lpad(dt.getUTCSeconds(), 2)].join(':');\n    timestamp += 'Z';\n  }\n  return timestamp;\n};","map":{"version":3,"names":["_","require","exports","abort","str","console","error","process","exit","htmlEscape","text","replace","lpad","n","len","chr","res","toString","leading","substr","length","distinctArray","arr","hash","arr_length","key","push","chunkArray","chunkSize","lists","groupBy","element","index","Math","floor","toArray","getTimestamp","Date","getTime","getTimestampFromDate","dt","bRealtime","timestamp","getUTCFullYear","getUTCMonth","getUTCDate","join","getUTCHours","getUTCMinutes","getUTCSeconds"],"sources":["/Users/braedenmeikle/Documents/repo/braeden-meikle-site/node_modules/sitemap/lib/utils.js"],"sourcesContent":["/*!\n * Sitemap\n * Copyright(c) 2011 Eugene Kalinin\n * MIT Licensed\n */\n\nvar _ = require('underscore');\n\n/**\n * Exit with the given `str`.\n *\n * @param {String} str\n */\nexports.abort = function (str) {\n  console.error(str);\n  process.exit(1);\n};\n\n/**\n * Escapes special characters in text.\n *\n * @param {String} text\n */\nexports.htmlEscape = function (text) {\n  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;');\n};\n\n/**\n *  Pads the left-side of a string with a specific\n *  set of characters.\n *\n *  @param {Object} n\n *  @param {Number} len\n *  @param {String} chr\n */\nexports.lpad = function (n, len, chr) {\n  var res = n.toString()\n    , chr = chr || '0'\n    , leading = (res.substr(0, 1) === '-');\n\n  //If left side of string is a minus sign (negative number), we want to ignore that in the padding process\n  if (leading) {\n    res = res.substr(1); //cut-off the leading '-'\n  }\n\n  while (res.length < len) {\n    res = chr + res;\n  }\n\n  if (leading) { //If we initially cutoff the leading '-', we add it again here\n    res = '-' + res;\n  }\n\n  return res;\n};\n\n/**\n *\n * @param {Array} arr\n */\nexports.distinctArray = function (arr) {\n  var hash = {}\n    , res = []\n    , arr_length = arr.length;\n  while (arr_length--) {\n    hash[arr[arr_length]] = true;\n  }\n  for (key in hash) {\n    res.push(key);\n  }\n  return res;\n};\n\nexports.chunkArray = function (arr, chunkSize) {\n  var lists = _.groupBy(arr, function (element, index) {\n    return Math.floor(index / chunkSize);\n  });\n  lists = _.toArray(lists);\n  return lists;\n};\n\nexports.getTimestamp = function () {\n  return (new Date()).getTime();\n};\n\nexports.getTimestampFromDate = function (dt, bRealtime) {\n  var timestamp = [dt.getUTCFullYear(), exports.lpad(dt.getUTCMonth() + 1, 2),\n    exports.lpad(dt.getUTCDate(), 2)].join('-');\n\n  // Indicate that lastmod should include minutes and seconds (and timezone)\n  if (bRealtime && bRealtime === true) {\n    timestamp += 'T';\n    timestamp += [exports.lpad(dt.getUTCHours(), 2),\n      exports.lpad(dt.getUTCMinutes(), 2),\n      exports.lpad(dt.getUTCSeconds(), 2)\n    ].join(':');\n    timestamp += 'Z';\n  }\n\n  return timestamp;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}