{"ast":null,"code":"import{markRead}from'../api.js';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const articles=[{title:'Swift is the best',content:SwiftByte},{title:'Force unwrapping is underrated',content:NilByte},{title:`Fun simplification of programming`,content:ProgrammingByte},{title:`My philosophy`,content:PhilosophyByte},{title:`The right way to ask questions`,content:QuestionByte},{title:`Artificial Intelligence come up`,content:AIByte},{title:`Consumer tendency`,content:ConsumerByte}];function ConsumerByte(){return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"p\",{style:{lineHeight:1.3,whiteSpace:'pre-wrap',textWrap:'wrap',color:'gray'},children:\"Consumers always want the simplest access to the services and applications they consume \\u2014 why interact with something if you don\\u2019t have to? This seems intuitive, because it is. In my life \\u2014 possibly due to my fixation on iPhones \\u2014 notifications and widgets are the best avenues for metadata. The mobile phone is highly accessible and you read notifications and tap widgets before you unlock your phone. I see both tools as ways for consumers to engage with applications but \\u201Cdo less\\u201D. The cheapest way to get the most information. I like to think of this as the limit of tolerated consumer work tends toward zero as time progresses. Naturally, companies develop faster, simpler processes over time due to innovation from competitors and changing markets. If you as a consumer are able to send a text message to your friend from your mind, why would you then want to open your phone, tap a messaging app, type a message, fix typos, and tap send? I wonder what the next breakthrough will be?\"})});}function AIByte(){return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"p\",{style:{lineHeight:1.3,whiteSpace:'pre-wrap',textWrap:'wrap',color:'gray'},children:\"As we close out 2024, I\\u2019d never expected to be this in awe of AI. Originally annoyed with companies\\u2019 inundation of the word \\u2018AI\\u2019. Over the past year, I\\u2019ve matured and embraced the SWE lifestyle and through this transformation, AI\\u2019s appeal has captured me and I\\u2019m more fascinated than ever. Maybe I\\u2019ve subconsciously become what I consume, and aggressive marketing has achieved its goal of winning over its toughest customer. I took my first AI class in my Fall 2022 semester, mostly unenthused. My thoughts in class then were (and sometimes still are!) more concerned with coding elegance than what was presented in front of me. Sometimes I can\\u2019t help but wonder, will companies disparage my software repertoire? Do I need to switch careers? How can I catch up to others? How did I get so far behind? Over time, these passive thoughts slowly corrode my confidence. I\\u2019m ready to go into 2025 with a fresh mindset, a stronger appetite for learning than ever, and we\\u2019ll see what happens?\"})});}function QuestionByte(){return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"p\",{style:{lineHeight:1.3,whiteSpace:'pre-wrap',textWrap:'wrap',color:'gray'},children:\"People tend to categorize questions into binary qualities of either 'good' or 'bad'. The secret to more strongly reinforcing knowledge is asking 'bad' questions that strike at the core of your learning and knowledge. Challenging a widely-accepted concept or practice online or to a peer sometimes leads to a seemingly obvious conclusion that the current idea isn't best.\"})});}function PhilosophyByte(){return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"p\",{style:{lineHeight:1.3,whiteSpace:'pre-wrap',textWrap:'wrap',color:'gray'},children:[/*#__PURE__*/_jsx(BLi,{txt:`Easy To Change (ETC)`}),\"A core concept of software is software rot (aka technical debt) tends toward infinity. Fundamentally, if a program or application is hard to change, it's worth trends toward zero over time.\",/*#__PURE__*/_jsx(BLi,{txt:`Keep It Simple, Stupid (KISS)`}),\"Abstraction is a blessing and a curse. Early programmers bestoyed a responsibility on us when they described these patterns and tools. Use carefully, as abstraction can greatly increase development time when done well but can decrease development time when done poorly. Finding the right balance between abstraction and localization requires a special feel. Sometimes, KISS may mean violating Don't Repeat Yourself (DRY).\",/*#__PURE__*/_jsx(BLi,{txt:`Ya Aren't Gonna Need It (YAGNI)`}),\"Until you actually need something, don't implement it. This is essentially a prioritization of work concern: there's always a feature, performance optimization, software rot, or equivalent piece of work more important than optimizing for a feature you may never use.\"]})});}function ProgrammingByte(){return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"p\",{style:{lineHeight:1.3,textWrap:'wrap',color:'gray'},children:[/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center'},children:/*#__PURE__*/_jsx(InCcode,{code:`0010`})}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),`\\n`,\"Programming begins where electricity is categorized to two buckets, on/off, semantically equivalent to binary.\",/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center'},children:\"\\u21D3\"}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center'},children:/*#__PURE__*/_jsx(InCcode,{code:`0x3CCF19`})}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),\"Hexadecimal is just more info with less ink. If we expand the set of elements a bit can represent from \",`{0, 1}`,\" to \",`{0, 1, .. , 9, A, B, .. F}`,\", we can make 1 element represents 4 elements (bits).\",/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center'},children:\"\\u21D3\"}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center'},children:/*#__PURE__*/_jsx(InCcode,{code:`void*malloc(size_t size)`})}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),\"Using the same logic, Strings are more with less! If we say every 2 bytes (2 * 4 bits) is a character, boom now we have strings\",/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center'},children:\"\\u21D3\"}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',justifyContent:'center'},children:/*#__PURE__*/_jsx(InCcode,{code:`if(!ptr) {\\n   printf(\"no memory\");\\n   exit(0);\\n}`})}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),\"Now we can add some fancy white-space formatting and tell everyone to use this exact protocol when coding. Now we make a compiler and we're done!\",/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),\"At its most raw state, programming is binary and a bunch of well-defined protocols.\"]})});}/* Big break component */function BBr(){return/*#__PURE__*/_jsx(\"div\",{style:{height:'4px'},children:/*#__PURE__*/_jsx(\"br\",{})});}/* Inline colored code component */function InCcode(_ref){let{code}=_ref;return/*#__PURE__*/_jsx(\"pre\",{style:{margin:'auto',display:'inline-block',color:'rgb(255,0,123)',fontSize:'14px'},children:code});}function BLi(_ref2){let{txt}=_ref2;return/*#__PURE__*/_jsxs(\"p\",{style:{lineHeight:'0.5',fontWeight:'bold'},children:[\"\\u21D2 \",txt]});}function SwiftByte(){return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"p\",{style:{lineHeight:1.3,textWrap:'wrap',color:'gray'},children:[\"Features I like:\",/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BLi,{txt:'default functions'}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(InCcode,{code:`protocol `}),\"+\",/*#__PURE__*/_jsx(InCcode,{code:` extension `}),\"solves the multi-inheritance problem\",/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BLi,{txt:'special early exit syntax'}),/*#__PURE__*/_jsx(InCcode,{code:`guard let key = req?.key else { return } `}),\"is just infinitely more intuitive/readable than if statements\",/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BLi,{txt:'elegant optional handling'}),/*#__PURE__*/_jsx(InCcode,{code:`prof.tas?.map { $0.acc?.desposit(5) } `}),\"just look how elegant that is\",/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BLi,{txt:'multi-paradigm nature'}),/*#__PURE__*/_jsx(BBr,{}),\"Pros of OOP + functional programming with no cons\",/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BLi,{txt:'no boilerplate'}),\"Seldom use \",/*#__PURE__*/_jsx(InCcode,{code:` import `}),\"+\",/*#__PURE__*/_jsx(InCcode,{code:` ; `}),\" and evolving syntactic sugar\",/*#__PURE__*/_jsx(BLi,{txt:'access modifiers'}),\"Explicit access modifiers are better than arbitrary string formatting (plus a variety)\",/*#__PURE__*/_jsx(BLi,{txt:'typing'}),\"Peak\",/*#__PURE__*/_jsx(InCcode,{code:` Swift `}),\"feels like dynamic vars checked at compile\",/*#__PURE__*/_jsx(BLi,{txt:'good async syntax'}),\"Succinct APIs + easy bridge to sync: \",/*#__PURE__*/_jsx(InCcode,{code:` Task { ... } `})]})});}function NilByte(){return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"p\",{style:{lineHeight:1.3,textWrap:'wrap',color:'gray'},children:[\"Force unwrapping an optional is better than null coalescing where the latter is app-breaking. Some shallow online digging may lead you to\\xA0\",/*#__PURE__*/_jsx(\"a\",{href:\"https://forums.swift.org/t/moving-toward-deprecating-force-unwrap-from-swift/43455\",target:\"_blank\",className:\"article\",rel:\"noreferrer\",children:\"articles suggesting the deprecation of the operator\"}),\".\",/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),\"It becomes almost subconscious to use null coalescing operators in languages with optionals bridging an optional to a non-optional. The default values satisfy the compiler but create an explicity allowed corrupted state fallback. A corrupted state is where the user experience may be completely compromised.\",/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),\"A common argument against force unwrapping with\",/*#__PURE__*/_jsx(InCcode,{code:` ! `}),\"is that it's riskier (it is) and therefore we can prevent crashes in a highly-scaled application where edge-cases are more likely to occur.\",/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),\"The alternative: the default value is used and the app reaches a corrupted state. I refer to this scenario as a 'soft crash'.\",/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),\"While violent, a forced crash as opposed to a soft crash is mutually better for the application and user. Really, it's a safer of two evils choice. In a corrupted application state, users may be able to access information they should not have access to or harm the system.\",/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),/*#__PURE__*/_jsx(BBr,{}),\"Crashing is easier to catch in development, and if it reaches production, easier to patch as long as the application is deployed with a crash-logging service (i.e. Firebase).\"]})});}function Articles(_ref3){let{unreadList}=_ref3;const contentMaxHeight='800px';function displayContent(index){// toggle chevron animation\nconst chevrons=document.getElementsByClassName('chevron');chevrons[index].classList.toggle('rotate');// drop down content (animated)\nconst panels=document.getElementsByClassName('panel');panels[index].style.maxHeight=panels[index].style.maxHeight===contentMaxHeight?'0px':contentMaxHeight;panels[index].classList.toggle('drop');// hide new badge once article is clicked for the first time\nconst newBadges=document.getElementsByClassName('new-badge');newBadges[index].classList.toggle('fade');newBadges[index].style.opacity=0;console.log('before');// markRead(index)\n}return/*#__PURE__*/_jsx(\"div\",{className:\"byte-div\",style:{padding:'50px 0 0 150px',width:'70vw',gap:'10px',display:'grid',gridTemplateColumns:'repeat(3, 1fr)'},children:articles.map((article,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"byte\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"drop-down\",onClick:()=>displayContent(index),children:[/*#__PURE__*/_jsx(\"p\",{style:{color:'rgb(160,160,160)',textShadow:'0px 0px 10px rgb(46, 190, 238), 0px 0px 10px rgb(46, 190, 238), 0px 0px 10px rgb(46, 190, 238)',paddingRight:'15px'},children:\"byte\"}),/*#__PURE__*/_jsx(\"p\",{style:{color:'gray'},children:article.title}),/*#__PURE__*/_jsxs(\"div\",{style:{marginLeft:'auto',display:'flex',gap:'12px',alignItems:'center'},children:[/*#__PURE__*/_jsx(\"p\",{className:\"new-badge\",style:{opacity:unreadList[index]===0?0:1,color:'rgb(0,255,0)',fontSize:'10px'},children:\"New\"}),/*#__PURE__*/_jsx(\"span\",{className:\"chevron\",style:{margin:'-2px 0 0 0'},children:\"\\u203A\"})]})]}),/*#__PURE__*/_jsx(\"div\",{class:\"panel\",children:/*#__PURE__*/_jsx(article.content,{})})]}))});}export{Articles};","map":{"version":3,"names":["markRead","jsx","_jsx","jsxs","_jsxs","articles","title","content","SwiftByte","NilByte","ProgrammingByte","PhilosophyByte","QuestionByte","AIByte","ConsumerByte","children","style","lineHeight","whiteSpace","textWrap","color","BLi","txt","display","justifyContent","InCcode","code","BBr","height","_ref","margin","fontSize","_ref2","fontWeight","href","target","className","rel","Articles","_ref3","unreadList","contentMaxHeight","displayContent","index","chevrons","document","getElementsByClassName","classList","toggle","panels","maxHeight","newBadges","opacity","console","log","padding","width","gap","gridTemplateColumns","map","article","onClick","textShadow","paddingRight","marginLeft","alignItems","class"],"sources":["/Users/braedenmeikle/Documents/repo/braeden-meikle-site/client/src/components/Articles.js"],"sourcesContent":["\nimport { markRead } from '../api.js'\n\nconst articles = [\n  {\n    title: 'Swift is the best',\n    content: SwiftByte\n  },\n  {\n    title: 'Force unwrapping is underrated',\n    content: NilByte\n  },\n  {\n    title: `Fun simplification of programming`,\n    content: ProgrammingByte\n  },\n  {\n    title: `My philosophy`,\n    content: PhilosophyByte\n  },\n  {\n    title: `The right way to ask questions`,\n    content: QuestionByte\n  },\n  {\n    title: `Artificial Intelligence come up`,\n    content: AIByte\n  },\n\n  {\n    title: `Consumer tendency`,\n    content: ConsumerByte\n  },\n]\n\nfunction ConsumerByte() {\n  return (\n    <div>\n    <p style={{lineHeight: 1.3, whiteSpace:'pre-wrap', textWrap: 'wrap', color: 'gray'}}>\n    Consumers always want the simplest access to the services and applications they \n    consume — why interact with something if you don’t have to? This seems intuitive, \n    because it is.\n    In my life — possibly due to my fixation on iPhones — notifications and widgets \n    are the best avenues for metadata. The mobile phone is highly accessible and you \n    read notifications and tap widgets before you unlock your phone. I see both tools \n    as ways for consumers to engage with applications but “do less”. The cheapest way \n    to get the most information.\n    I like to think of this as the limit of tolerated consumer work tends toward zero \n    as time progresses. Naturally, companies develop faster, simpler processes over \n    time due to innovation from competitors and changing markets. If you as a consumer \n    are able to send a text message to your friend from your mind, why would you then \n    want to open your phone, tap a messaging app, type a message, fix typos, and tap \n    send?\n    I wonder what the next breakthrough will be?\n    </p>\n  </div>\n  )\n}\n\nfunction AIByte() {\n  return (\n    <div>\n    <p style={{lineHeight: 1.3, whiteSpace:'pre-wrap', textWrap: 'wrap', color: 'gray'}}>\n    As we close out 2024, I’d never expected to be this in awe of AI. Originally \n    annoyed with companies’ inundation of the word ‘AI’. Over the past year, I’ve \n    matured and embraced the SWE lifestyle and through this transformation, AI’s \n    appeal has captured me and I’m more fascinated than ever. Maybe I’ve subconsciously \n    become what I consume, and aggressive marketing has achieved its goal of winning \n    over its toughest customer.\n\n    I took my first AI class in my Fall 2022 semester, mostly unenthused. My thoughts in \n    class then were (and sometimes still are!) more concerned with coding elegance than \n    what was presented in front of me.\n    Sometimes I can’t help but wonder, will companies disparage my software repertoire? \n    Do I need to switch careers? How can I catch up to others? How did I get so far \n    behind? Over time, these passive thoughts slowly corrode my confidence.\n\n    I’m ready to go into 2025 with a fresh mindset, a stronger appetite for learning than \n    ever, and we’ll see what happens? \n    </p>\n  </div>\n  )\n}\n\nfunction QuestionByte() {\n  return (\n    <div>\n    <p style={{lineHeight: 1.3, whiteSpace:'pre-wrap', textWrap: 'wrap', color: 'gray'}}>\n      People tend to categorize questions into binary qualities of either 'good' or 'bad'. \n      The secret to more strongly reinforcing knowledge is asking 'bad' questions that strike\n      at the core of your learning and knowledge. Challenging a widely-accepted concept or\n      practice online or to a peer sometimes leads to a seemingly obvious conclusion that\n      the current idea isn't best. \n    </p>\n  </div>\n  )\n}\n\nfunction PhilosophyByte() {\n  return (\n    <div>\n    <p style={{lineHeight: 1.3, whiteSpace:'pre-wrap', textWrap: 'wrap', color: 'gray'}}>\n    <BLi txt={`Easy To Change (ETC)`}/>\n      A core concept of software is software\n      rot (aka technical debt) tends toward infinity. Fundamentally, if a program \n      or application is hard to change, it's worth trends toward zero over time.\n      <BLi txt={`Keep It Simple, Stupid (KISS)`}/>\n      Abstraction is a blessing and a curse. Early programmers bestoyed a responsibility\n      on us when they described these patterns and tools. Use carefully, as abstraction\n      can greatly increase development time when done well but can decrease development\n      time when done poorly. Finding the right balance between abstraction and \n      localization requires a special feel. Sometimes, KISS may mean violating Don't \n      Repeat Yourself (DRY).\n      <BLi txt={`Ya Aren't Gonna Need It (YAGNI)`}/>\n      Until you actually need something, don't implement it. This is essentially a \n      prioritization of work concern: there's always a feature, performance optimization,\n      software rot, or equivalent piece of work more important than optimizing for a\n      feature you may never use.\n    </p>\n  </div>\n  )\n}\n\nfunction ProgrammingByte() {\n  return (\n    <div>\n      <p style={{lineHeight: 1.3, textWrap: 'wrap', color: 'gray'}}>\n        <div style={{display:'flex', justifyContent:'center'}}><InCcode code={`0010`}/></div>\n        <BBr/><BBr/>\n        {`\\n`}Programming begins where electricity is categorized to two buckets, \n        on/off, semantically equivalent to binary.\n        <BBr/><BBr/><BBr/><div style={{display:'flex', justifyContent:'center'}}>&dArr;</div><BBr/><BBr/><BBr/>\n        <div style={{display:'flex', justifyContent:'center'}}><InCcode code={`0x3CCF19`}/></div>\n        <BBr/><BBr/>\n        Hexadecimal is just more info with less ink. If we expand the set of elements a bit can represent from {`{0, 1}`} to {`{0, 1, .. , 9, A, B, .. F}`},\n        we can make 1 element represents 4 elements (bits). \n        <BBr/><BBr/><BBr/><div style={{display:'flex', justifyContent:'center'}}>&dArr;</div><BBr/><BBr/><BBr/>\n        <div style={{display:'flex', justifyContent:'center'}}><InCcode code={`void*malloc(size_t size)`}/></div>\n        <BBr/><BBr/>\n        Using the same logic, Strings are more with less! If we say every 2 bytes (2 * 4 bits) is a character, boom\n        now we have strings\n        <BBr/><BBr/><BBr/><div style={{display:'flex', justifyContent:'center'}}>&dArr;</div><BBr/><BBr/><BBr/>\n        <div style={{display:'flex', justifyContent:'center'}}><InCcode code={`if(!ptr) {\\n   printf(\"no memory\");\\n   exit(0);\\n}`}/></div>\n        <BBr/><BBr/>\n        Now we can add some fancy white-space formatting and tell everyone to use this exact protocol when coding. Now we\n        make a compiler and we're done!\n        <BBr/><BBr/><BBr/><BBr/><BBr/><BBr/>\n        At its most raw state, programming is binary and a bunch of well-defined protocols.\n      </p>\n    </div>\n  )\n}\n\n/* Big break component */\nfunction BBr() { return <div style={{height: '4px'}}><br></br></div> }\n\n/* Inline colored code component */\nfunction InCcode({ code }) {\n  return <pre style={{margin:'auto', display:'inline-block', color: 'rgb(255,0,123)', fontSize:'14px'}}>{code}</pre>\n}\n\nfunction BLi({ txt }) { return <p style={{lineHeight:'0.5', fontWeight:'bold'}}>&rArr; {txt}</p> }\n\nfunction SwiftByte() {\n  return (\n    <div>\n      <p style={{lineHeight: 1.3, textWrap: 'wrap', color: 'gray'}}>\n        Features I like:\n        <BBr/>\n        <BLi txt={'default functions'}/>\n        <BBr/>\n        <InCcode code={`protocol `}/>+<InCcode code={` extension `}/>\n        solves the multi-inheritance problem\n        <BBr/>\n        <BLi txt={'special early exit syntax'}/>\n        <InCcode code={`guard let key = req?.key else { return } `}/>\n        is just infinitely more intuitive/readable than if statements\n        <BBr/>\n        <BLi txt={'elegant optional handling'}/>\n        <InCcode code={`prof.tas?.map { $0.acc?.desposit(5) } `}/>\n        just look how elegant that is\n        <BBr/>\n        <BLi txt={'multi-paradigm nature'}/>\n        <BBr/>\n        Pros of OOP + functional programming with no cons\n        <BBr/>\n        <BLi txt={'no boilerplate'}/>\n        Seldom use <InCcode code={` import `}/>+<InCcode code={` ; `}/> and evolving syntactic sugar\n        <BLi txt={'access modifiers'}/>\n        Explicit access modifiers are better than arbitrary string formatting (plus a variety)\n        <BLi txt={'typing'}/>\n        Peak<InCcode code={` Swift `}/>feels like dynamic vars checked at compile\n        <BLi txt={'good async syntax'}/>\n        Succinct APIs + easy bridge to sync: <InCcode code={` Task { ... } `}/>\n      </p>\n    </div>\n  )\n}\n\nfunction NilByte() {\n  return (\n    <div>\n      <p style={{lineHeight: 1.3, textWrap: 'wrap', color: 'gray'}}>\n        Force unwrapping an optional is better than null coalescing where the latter is app-breaking. \n        Some shallow online digging may lead you to&nbsp;\n        <a href='https://forums.swift.org/t/moving-toward-deprecating-force-unwrap-from-swift/43455' \n        target='_blank' className='article' rel='noreferrer'>\n          articles suggesting the deprecation of the operator\n        </a>\n        .\n        <BBr/><BBr/><BBr/><BBr/>\n        It becomes almost subconscious to use null coalescing operators in languages with optionals \n        bridging an optional to a non-optional. The default values satisfy the compiler but create an \n        explicity allowed corrupted state fallback. A corrupted state is where the user experience \n        may be completely compromised. \n        <BBr/><BBr/><BBr/><BBr/>\n        A common argument against force unwrapping with<InCcode code={` ! `}/>is that it's riskier (it is) and therefore we can\n        prevent crashes in a highly-scaled application where edge-cases are more likely to occur. \n        <BBr/><BBr/><BBr/><BBr/>\n        The alternative: the default value is used and the app reaches a corrupted state. I refer to \n        this scenario as a 'soft crash'.\n        <BBr/><BBr/><BBr/><BBr/>\n        While violent, a forced crash as opposed to a soft crash is mutually better for the application\n        and user. Really, it's a safer of two evils choice. In a corrupted application state, users \n        may be able to access information they should not have access to or harm the system.\n        <BBr/><BBr/><BBr/><BBr/>\n        Crashing is easier to catch in development, and if it reaches production, easier to patch\n        as long as the application is deployed with a crash-logging service (i.e. Firebase).\n      </p>\n    </div>\n  )\n}\n\nfunction Articles({ unreadList }) {\n  \n  const contentMaxHeight = '800px'\n\n  function displayContent(index) {\n    // toggle chevron animation\n    const chevrons = document.getElementsByClassName('chevron')\n    chevrons[index].classList.toggle('rotate')\n\n    // drop down content (animated)\n    const panels = document.getElementsByClassName('panel')\n    panels[index].style.maxHeight = panels[index].style.maxHeight === contentMaxHeight ? '0px' : contentMaxHeight\n    panels[index].classList.toggle('drop')\n\n    // hide new badge once article is clicked for the first time\n    const newBadges = document.getElementsByClassName('new-badge')\n    newBadges[index].classList.toggle('fade')\n    newBadges[index].style.opacity = 0\n    console.log('before')\n    // markRead(index)\n  }\n\n  return (\n    <div className='byte-div' style={{padding:'50px 0 0 150px', width: '70vw', gap: '10px', display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)'}}>\n      {articles.map((article, index) => <div className='byte'>\n        <button className='drop-down' onClick={() => displayContent(index)}>\n        <p style={{\n          color: 'rgb(160,160,160)',\n          textShadow: '0px 0px 10px rgb(46, 190, 238), 0px 0px 10px rgb(46, 190, 238), 0px 0px 10px rgb(46, 190, 238)',\n          paddingRight: '15px'\n          }}>byte</p>\n          <p style={{color: 'gray'}}>{article.title}</p>\n          <div style={{marginLeft: 'auto', display: 'flex', gap: '12px', alignItems: 'center'}}>\n            <p className='new-badge' style={{opacity: unreadList[index] === 0 ? 0 : 1, color: 'rgb(0,255,0)', fontSize:'10px'}}>New</p>\n            <span className='chevron' style={{margin:'-2px 0 0 0'}}>&rsaquo;</span>\n          </div>\n        </button>\n        <div class='panel'>\n          {<article.content/>}\n        </div>\n      </div>)}\n    </div>\n  )\n}\n\nexport { Articles }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}