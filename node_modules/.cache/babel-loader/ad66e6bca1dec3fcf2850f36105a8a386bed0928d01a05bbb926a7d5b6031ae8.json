{"ast":null,"code":"var _jsxFileName = \"/Users/braedenmeikle/Documents/repo/braeden-meikle-site/client/src/components/App.js\",\n  _s = $RefreshSig$();\nimport '../styles/global.css';\nimport React, { useState, useEffect } from 'react';\nimport { pages } from '../data/consts.js';\nimport { Fun } from './Fun.js';\nimport { AnimatedSidebar } from './Sidebar.js';\nimport { Footer } from './Footer.js';\nimport { Portfolio } from './Portfolio.js';\nimport { Articles } from './Articles.js';\nimport { VDivider } from './Vdiv.js';\nimport { getUnread } from '../api.js';\nimport { color } from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Body() {\n  _s();\n  /* Data fetched from backend that will be passed to component before render */\n  const [data, setData] = useState(null);\n\n  /* We init our app to loading state */\n  const [isLoading, setLoading] = useState(true);\n  useEffect(() => {\n    const baseURL = `${process.env.SERVER_BASE_URL}/getUnread`;\n    const user = 'user2';\n    const service = '/getUnread';\n    const url = `${baseURL}${service}?user=${user}`;\n    const body = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    };\n    fetch(url, body).then(res => res.json()).then(d => {\n      setData(d);\n      setLoading(false);\n    });\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'white'\n      },\n      children: \"...Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"body\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Body, \"9hfq03Dtf1U6/pkOT6/HOHrc9QU=\");\n_c = Body;\nexport default function App() {\n  return /*#__PURE__*/_jsxDEV(Body, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 10\n  }, this);\n}\n_c2 = App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Body\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","pages","Fun","AnimatedSidebar","Footer","Portfolio","Articles","VDivider","getUnread","color","jsxDEV","_jsxDEV","Body","_s","data","setData","isLoading","setLoading","baseURL","process","env","SERVER_BASE_URL","user","service","url","body","method","headers","fetch","then","res","json","d","style","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_c2","$RefreshReg$"],"sources":["/Users/braedenmeikle/Documents/repo/braeden-meikle-site/client/src/components/App.js"],"sourcesContent":["\nimport '../styles/global.css'\nimport React, { useState, useEffect } from 'react'\nimport { \n  pages,\n} from '../data/consts.js'\nimport { Fun } from './Fun.js'\nimport { AnimatedSidebar } from './Sidebar.js'\nimport { Footer } from './Footer.js'\nimport { Portfolio } from './Portfolio.js'\nimport { Articles } from './Articles.js'\nimport { VDivider } from './Vdiv.js'\nimport { getUnread } from '../api.js' \nimport { color } from 'd3'\n\nfunction Body() {\n  /* Data fetched from backend that will be passed to component before render */\n  const [data, setData] = useState(null)\n\n  /* We init our app to loading state */\n  const [isLoading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const baseURL = `${process.env.SERVER_BASE_URL}/getUnread`\n    const user = 'user2'\n    const service = '/getUnread'\n    const url =  `${baseURL}${service}?user=${user}`\n\n    const body = {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache'\n        } \n    }\n\n    fetch(url, body).then(res => res.json()).then(d => { \n      setData(d)\n      setLoading(false)\n    })\n  }, [])\n\n  if (isLoading) {\n    return <div style={{color: 'white'}}>...Loading</div>\n  }\n\n  return (\n    <body>\n      {/* <AnimatedSidebar pages={pages}/>\n      <div id='fun'>\n        <Fun/>\n      </div>\n      <VDivider/>\n      <div id='portfolio'>\n        <Portfolio/>\n      </div>\n      <VDivider/>\n      <div id='articles'>\n        <Articles/>\n      </div>\n      <VDivider/>\n      <div style={{display:'flex', justifyContent:'center'}}>\n        <Footer/>\n      </div> */}\n    </body>\n  )\n}\n\nexport default function App() {\n  return <Body/>\n}"],"mappings":";;AACA,OAAO,sBAAsB;AAC7B,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,KAAK,QACA,mBAAmB;AAC1B,SAASC,GAAG,QAAQ,UAAU;AAC9B,SAASC,eAAe,QAAQ,cAAc;AAC9C,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,QAAQ,QAAQ,WAAW;AACpC,SAASC,SAAS,QAAQ,WAAW;AACrC,SAASC,KAAK,QAAQ,IAAI;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACA,MAAM,CAACiB,SAAS,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,MAAMkB,OAAO,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,eAAe,YAAY;IAC1D,MAAMC,IAAI,GAAG,OAAO;IACpB,MAAMC,OAAO,GAAG,YAAY;IAC5B,MAAMC,GAAG,GAAI,GAAGN,OAAO,GAAGK,OAAO,SAASD,IAAI,EAAE;IAEhD,MAAMG,IAAI,GAAG;MACTC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE;MACnB;IACJ,CAAC;IAEDC,KAAK,CAACJ,GAAG,EAAEC,IAAI,CAAC,CAACI,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAACF,IAAI,CAACG,CAAC,IAAI;MACjDjB,OAAO,CAACiB,CAAC,CAAC;MACVf,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,IAAID,SAAS,EAAE;IACb,oBAAOL,OAAA;MAAKsB,KAAK,EAAE;QAACxB,KAAK,EAAE;MAAO,CAAE;MAAAyB,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACvD;EAEA,oBACE3B,OAAA;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAiBM,CAAC;AAEX;AAACzB,EAAA,CAnDQD,IAAI;AAAA2B,EAAA,GAAJ3B,IAAI;AAqDb,eAAe,SAAS4B,GAAGA,CAAA,EAAG;EAC5B,oBAAO7B,OAAA,CAACC,IAAI;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAChB;AAACG,GAAA,GAFuBD,GAAG;AAAA,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}