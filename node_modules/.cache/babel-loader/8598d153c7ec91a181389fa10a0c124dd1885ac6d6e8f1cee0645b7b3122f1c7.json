{"ast":null,"code":"const BASE_URL = 'http://localhost:8000'; //`${process.env.SERVER_BASE_URL}`\n\nfunction getUnread() {\n  const baseURL = `${BASE_URL}/getUnread`;\n  const user = 'user2';\n  const url = `${baseURL}?user=${user}`;\n  const body = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Cache-Control': 'no-cache'\n    }\n  };\n  fetch(url, body).then(res => res.json()).then(d => {\n    return d;\n  });\n}\nasync function markRead(index) {\n  const baseURL = `${BASE_URL}/read`;\n  const user = 'user2';\n  const url = `${baseURL}?user=${user}?read=${index}`;\n  const body = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'text/json'\n    }\n  };\n  console.log('constructed req');\n  try {\n    const response = await fetch(url, body);\n    if (!response.ok) {\n      throw new Error(`Response status: ${response.status}`);\n    }\n    console.log('res received');\n    console.log(response.json);\n    return response;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\nexport { getUnread, markRead };","map":{"version":3,"names":["BASE_URL","getUnread","baseURL","user","url","body","method","headers","fetch","then","res","json","d","markRead","index","console","log","response","ok","Error","status","error","message"],"sources":["/Users/braedenmeikle/Documents/repo/braeden-meikle-site/client/src/api.js"],"sourcesContent":["\nconst BASE_URL = 'http://localhost:8000' //`${process.env.SERVER_BASE_URL}`\n\nfunction getUnread() {\n  const baseURL = `${BASE_URL}/getUnread`\n  const user = 'user2'\n  const url =  `${baseURL}?user=${user}`\n\n  const body = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache'\n      } \n  }\n\n  fetch(url, body).then(res => res.json()).then(d => { return d })\n}\n\nasync function markRead(index) {\n  const baseURL = `${BASE_URL}/read`\n  const user = 'user2'\n  const url = `${baseURL}?user=${user}?read=${index}`\n\n  const body = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'text/json'\n      } \n  }\n\n  console.log('constructed req')\n\n  try {\n    const response = await fetch(url, body)\n    if (!response.ok) {\n      throw new Error(`Response status: ${response.status}`)\n    }\n    console.log('res received')\n    console.log(response.json)\n    return response\n  } catch (error) {\n    console.log(error.message)\n  }\n}\n\nexport { getUnread, markRead }"],"mappings":"AACA,MAAMA,QAAQ,GAAG,uBAAuB,EAAC;;AAEzC,SAASC,SAASA,CAAA,EAAG;EACnB,MAAMC,OAAO,GAAG,GAAGF,QAAQ,YAAY;EACvC,MAAMG,IAAI,GAAG,OAAO;EACpB,MAAMC,GAAG,GAAI,GAAGF,OAAO,SAASC,IAAI,EAAE;EAEtC,MAAME,IAAI,GAAG;IACTC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE;IACnB;EACJ,CAAC;EAEDC,KAAK,CAACJ,GAAG,EAAEC,IAAI,CAAC,CAACI,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CAACF,IAAI,CAACG,CAAC,IAAI;IAAE,OAAOA,CAAC;EAAC,CAAC,CAAC;AAClE;AAEA,eAAeC,QAAQA,CAACC,KAAK,EAAE;EAC7B,MAAMZ,OAAO,GAAG,GAAGF,QAAQ,OAAO;EAClC,MAAMG,IAAI,GAAG,OAAO;EACpB,MAAMC,GAAG,GAAG,GAAGF,OAAO,SAASC,IAAI,SAASW,KAAK,EAAE;EAEnD,MAAMT,IAAI,GAAG;IACTC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACJ,CAAC;EAEDQ,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;EAE9B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACJ,GAAG,EAAEC,IAAI,CAAC;IACvC,IAAI,CAACY,QAAQ,CAACC,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,oBAAoBF,QAAQ,CAACG,MAAM,EAAE,CAAC;IACxD;IACAL,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3BD,OAAO,CAACC,GAAG,CAACC,QAAQ,CAACN,IAAI,CAAC;IAC1B,OAAOM,QAAQ;EACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdN,OAAO,CAACC,GAAG,CAACK,KAAK,CAACC,OAAO,CAAC;EAC5B;AACF;AAEA,SAASrB,SAAS,EAAEY,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}