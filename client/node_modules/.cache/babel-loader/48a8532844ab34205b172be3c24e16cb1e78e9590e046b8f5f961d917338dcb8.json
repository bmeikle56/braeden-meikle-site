{"ast":null,"code":"const user='braeden';const BASE_URL=`${process.env.REACT_APP_SERVER_BASE_URL}`;const body={method:'GET',headers:{'Content-Type':'application/json','Cache-Control':'no-cache'}};let newBytesRead;/*****     Public APIs     *****//*   Get list of byte read/unread statuses   */function getUnread(setData,setLoading,now){/*   Server is too slow, so we mock the HTTP request   */setTimeout(()=>{setData({'unreadList':[1,1,1,1,1,1,1]});setLoading(false);},2000);/*\n  const service = '/getUnread'\n  fetch(`${BASE_URL}${service}?user=${user}`, body).then(res => res.json()).then(d => { \n    newBytesRead = d.unreadList\n\n    // We want the screen to animate for minimum 2 seconds\n    if (Date.now() < now + 2000) {\n      setTimeout(() => {\n        setData(d)\n        setLoading(false)\n      }, 2000 - (Date.now() - now))\n    } else {\n      setData(d)\n      setLoading(false)\n    }\n  })\n  */}/*   Mark a byte newly read  */function markRead(index){newBytesRead[index]=0;console.log(newBytesRead);}/*****                     *****//*  Before the user leaves, dump and mark all bytes read   */window.addEventListener('beforeunload',_=>{console.log(newBytesRead);const service='/read';fetch(`${BASE_URL}${service}?read=${user}`,body);});export{getUnread,markRead};","map":{"version":3,"names":["user","BASE_URL","process","env","REACT_APP_SERVER_BASE_URL","body","method","headers","newBytesRead","getUnread","setData","setLoading","now","setTimeout","markRead","index","console","log","window","addEventListener","_","service","fetch"],"sources":["/Users/braedenmeikle/Documents/repo/braeden-meikle-site/client/src/api.js"],"sourcesContent":["\nconst user = 'braeden'\nconst BASE_URL = `${process.env.REACT_APP_SERVER_BASE_URL}`\n\nconst body = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Cache-Control': 'no-cache'\n    } \n}\n\nlet newBytesRead\n\n/*****     Public APIs     *****/\n\n/*   Get list of byte read/unread statuses   */\nfunction getUnread(setData, setLoading, now) {\n\n  /*   Server is too slow, so we mock the HTTP request   */\n  setTimeout(() => {\n    setData({'unreadList': [1,1,1,1,1,1,1]})\n    setLoading(false)\n  }, 2000)\n\n  /*\n  const service = '/getUnread'\n  fetch(`${BASE_URL}${service}?user=${user}`, body).then(res => res.json()).then(d => { \n    newBytesRead = d.unreadList\n\n    // We want the screen to animate for minimum 2 seconds\n    if (Date.now() < now + 2000) {\n      setTimeout(() => {\n        setData(d)\n        setLoading(false)\n      }, 2000 - (Date.now() - now))\n    } else {\n      setData(d)\n      setLoading(false)\n    }\n  })\n  */\n}\n\n/*   Mark a byte newly read  */\nfunction markRead(index) {\n  newBytesRead[index] = 0\n  console.log(newBytesRead)\n}\n\n/*****                     *****/\n\n/*  Before the user leaves, dump and mark all bytes read   */\nwindow.addEventListener('beforeunload', _ => {\n  console.log(newBytesRead)\n  const service = '/read'\n  fetch(`${BASE_URL}${service}?read=${user}`, body)\n})\n\nexport { getUnread, markRead }"],"mappings":"AACA,KAAM,CAAAA,IAAI,CAAG,SAAS,CACtB,KAAM,CAAAC,QAAQ,CAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB,EAAE,CAE3D,KAAM,CAAAC,IAAI,CAAG,CACTC,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,eAAe,CAAE,UACnB,CACJ,CAAC,CAED,GAAI,CAAAC,YAAY,CAEhB,iCAEA,+CACA,QAAS,CAAAC,SAASA,CAACC,OAAO,CAAEC,UAAU,CAAEC,GAAG,CAAE,CAE3C,yDACAC,UAAU,CAAC,IAAM,CACfH,OAAO,CAAC,CAAC,YAAY,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACxCC,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAAE,IAAI,CAAC,CAER;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IACA,CAEA,+BACA,QAAS,CAAAG,QAAQA,CAACC,KAAK,CAAE,CACvBP,YAAY,CAACO,KAAK,CAAC,CAAG,CAAC,CACvBC,OAAO,CAACC,GAAG,CAACT,YAAY,CAAC,CAC3B,CAEA,iCAEA,6DACAU,MAAM,CAACC,gBAAgB,CAAC,cAAc,CAAEC,CAAC,EAAI,CAC3CJ,OAAO,CAACC,GAAG,CAACT,YAAY,CAAC,CACzB,KAAM,CAAAa,OAAO,CAAG,OAAO,CACvBC,KAAK,CAAC,GAAGrB,QAAQ,GAAGoB,OAAO,SAASrB,IAAI,EAAE,CAAEK,IAAI,CAAC,CACnD,CAAC,CAAC,CAEF,OAASI,SAAS,CAAEK,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}